layout_hermit() {
  # Allow for alternate install locations of hermit
  local hermit_activate_bin="$(find . -name 'activate-hermit')"
  if [[ ! -z "$hermit_activate_bin" ]];then
    source "$hermit_activate_bin"
  fi
}

add_extra_vimrc() {
  local extravim="$(find_up .vimrc)"
  echo "Extra vim: $extravim"
  if [ -n "$extravim" ]; then
    echo "Adding extra .vimrc: ${extravim}"
    path_add EXTRA_VIM $extravim
  fi
}

include_work_env(){
  source_env $HOME/source/.envrc
}

include_work_zsh(){
  source $HOME/source/.work.zsh
}

include_zsh(){
  source "${1}"
}

export_env_file(){
  IFS=$'\n'
  export $(cat "${1}" | grep -ve "^#" | tr -d "[\"\']$")
}

export_dotgpg_file(){
  source <( dotgpg cat $1 )
}

export_local_env_file(){
  export_env_file "${PWD}/$1"
}

source_local_env_file(){
  eval "$(cat ${PWD}/$1)"
}

use_pyenv() {
  unset PYENV_VERSION
  # Because each python version is prepended to the PATH, add them in reverse order
  for ((j = $#; j >= 1; j--)); do
    local python_version=${!j}
    local pyenv_python=$(pyenv root)/versions/${python_version}/bin/python
    if [[ ! -x "$pyenv_python" ]]; then
      log_error "Error: $pyenv_python can't be executed."
      return 1
    fi

    unset PYTHONHOME
    local ve=$($pyenv_python -c "import pkgutil; print('venv' if pkgutil.find_loader('venv') else ('virtualenv' if pkgutil.find_loader('virtualenv') else ''))")

    case $ve in
      "venv")
        VIRTUAL_ENV=$(direnv_layout_dir)/python-$python_version
        export VIRTUAL_ENV
        if [[ ! -d $VIRTUAL_ENV ]]; then
          $pyenv_python -m venv "$VIRTUAL_ENV"
        fi
        PATH_add "$VIRTUAL_ENV"/bin
        ;;
      "virtualenv")
        layout_python "$pyenv_python"
        ;;
      *)
        log_error "Error: neither venv nor virtualenv are available to ${pyenv_python}."
        return 1
        ;;
    esac

    # e.g. Given "use pyenv 3.6.9 2.7.16", PYENV_VERSION becomes "3.6.9:2.7.16"
    [[ -z "$PYENV_VERSION" ]] && PYENV_VERSION=$python_version || PYENV_VERSION="${python_version}:$PYENV_VERSION"
  done

  export PYENV_VERSION
}

# Usage: daemonize <name> [<command> [...<args>]]
#
# Starts the command in the background with an exclusive lock on $name.
#
# If no command is passed, it uses the name as the command.
#
# Logs are in .direnv/$name.log
#
# To kill the process, run `kill $(< .direnv/$name.pid)`.
# Credit: https://github.com/direnv/direnv/wiki/Daemonize
daemonize() {
  local name=$1
  shift
  local pid_file=$(direnv_layout_dir)/$name.pid
  local log_file=$(direnv_layout_dir)/$name.log

  if [[ $# -lt 1 ]]; then
    cmd=$name
  else
    cmd=$1
    shift
  fi

  if ! has "$cmd"; then
    echo "ERROR: $cmd not found"
    return 1
  fi

  mkdir -p "$(direnv_layout_dir)"

  # Open pid_file on file descriptor 200
  exec 200>"$pid_file"

  # Check that we have exclusive access
  if ! flock --nonblock 200; then
    echo "daemonize[$name] is already running as pid $(< "$pid_file")"
    return
  fi

  # Start the process in the background. This requires two forks to escape the
  # control of bash.

  # First fork
  (
    # Second fork
    (
      echo "daemonize[$name:$BASHPID]: starting $cmd $*" >&2

      # Record the PID for good measure
      echo "$BASHPID" >&200

      # Redirect standard file descriptors
      exec 0</dev/null
      exec 1>"$log_file"
      exec 2>&1
      # Used by direnv
      exec 3>&-
      exec 4>&-

      # Run command
      exec "$cmd" "$@"
    ) &
  ) &

  # Release that file descriptor
  exec 200>&-
}
