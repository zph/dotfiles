#!/usr/bin/env bash
#
# Clients simultaneously interacting with various windows of a session
# In “Practical Tmux”, Brandur Leach writes:
# Screen and tmux's behaviour for when multiple clients are attached to one session differs slightly. In Screen, each client can be connected to the session but view different windows within it, but in tmux, all clients connected to one session must view the same window. This problem can be solved in tmux by spawning two separate sessions and synchronizing the second one to the windows of the first, then pointing a second new session to the first.
# Modified TMUX start script from:
#     http://forums.gentoo.org/viewtopic-t-836006-start-0.html
#
# Store it to `~/bin/tmx` and issue `chmod +x ~/bin/tmx`.
#

# Works because bash automatically trims by assigning to variables and by
# passing arguments
trim() { echo $1; }

if [[ -z "$1" ]]; then
  echo "Using foldername ($PWD) as session name. "
fi

readonly SESSION="${1:-$(basename $PWD)}"

# Only because I often issue `ls` to this script by accident
if [[ "$SESSION" == "ls" ]]; then
  tmux ls
  exit
fi

base_session="$SESSION"
# This actually works without the trim() on all systems except OSX
tmux_nb=$(trim `tmux ls | grep "^$base_session" | wc -l`)
if [[ "$tmux_nb" == "0" ]]; then
  echo "Launching tmux base session $base_session ..."
  tmux new-session -s $base_session
else
  # Make sure we are not already in a tmux session
  if [[ -z "$TMUX" ]]; then
    echo "Launching copy of base session $base_session ..."
    # Session id is date and time to prevent conflict
    session_id=`date +%Y%m%d%H%M%S`
    # Create a new session (without attaching it) and link to base session 
    # to share windows
    tmux new-session -d -t $base_session -s $session_id
    if [[ "$2" == "1" ]]; then
      # Create a new window in that session
      tmux new-window
    fi
    # Attach to the new session & kill it once orphaned
    tmux attach-session -t $session_id \; set-option destroy-unattached
  fi
fi
