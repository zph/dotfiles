#!/usr/bin/env bash

# Original script credit: @StephenBallNC

## Completions

# function _complete_git-go {
#   reply=($(git branch -r | grep -v -- '->' | cut -d '/' -f 2))
# }
# compctl -K _complete_git-go git-go
# alias gg="git go"
# compctl -K _complete_git-go gg

set -eou pipefail

# Defaults
DEBUG="false"

function usage(){
  cat <<- EOF
USAGE: git-go BRANCHNAME
Fetches, searches origin for branchname and then sets tracking and checksout
Requires "selecta" bin to be in \$PATH\n
EOF
}

function print_usage(){
    printf "$(usage)"
}

OPTIND=1
while getopts ":hdv" o ; do # set $o to the next passed option
  case "$o" in
    v) # set "v" flag
      VERBOSE="true"
      ;;
    d)
      DEBUG="true"
      ;;
    h)
      print_usage
      exit
      ;;
  esac
done

shift $(($OPTIND - 1))

if [[ ! -x `which selecta` ]];then
  printf "Please install selecta\n"
  print_usage
  exit 1
fi

if [[ $DEBUG == "true" ]];then
  set -o xtrace
fi

readonly REMOTE=${2:-origin}
readonly BRANCH_PATTERN=$1

function get_branches(){
  # Ignore symlink branches
  git branch -r | grep -v -- "->" | grep "$1"
}

function branch_names(){
  get_branches $1 | cut -d '/' -f 2
}

function checkout_branch(){
  git checkout -B $1 ${REMOTE}/$1
}

function main(){

  git fetch &> /dev/null &
  local pid=$!

  readonly MATCHES=($(branch_names $BRANCH_PATTERN | wc -l | egrep -o '\d+'))

  case $MATCHES in
    0 )
      echo "$BRANCH_PATTERN not found on origin"
      ;;
    1 )
      checkout_branch $(branch_names $BRANCH_PATTERN)
      ;;
    * )
      branch_choice=$( branch_names $BRANCH_PATTERN | selecta)
      checkout_branch $branch_choice
      ;;
  esac

  wait $pid
}

main
