#!/usr/bin/env ruby
# Parse joplin sqlite db and update dates used in title such as:
# - @today
# - @tomorrow
# - @yesterday
# - @(in three days)
# - @(next monday)

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'sequel'
  gem 'pry'
  gem 'sqlite3'
  gem 'chronic'
end

require 'logger'
LOG = Logger.new($stdout)
LOG.level = Logger::INFO

DB = Sequel.connect("sqlite://#{ENV['HOME']}/.config/joplin-desktop/database.sqlite")

class Note < Sequel::Model(DB[:notes])
end

# TODO: make this not egregiously inefficient
records = Note.all.select { |n| n[:title][/@/] }

def extract_timestamp_and_insert_date(record)
  title = record.title
  match_regex = / ?@\((.*)\)/
  inner_match = title.match(match_regex)
  if inner_match
    match = inner_match[1]
  else
    match_regex = / ?@(\w+)/
    m = title.match(match_regex)
    return unless m

    match = m[1]
  end
  ts = Chronic.parse(match)
  return unless ts

  ts_milli = ts.to_i * 1000
  record.todo_due = ts_milli
  record.title = record.title.gsub(match_regex, '')
  record.save
  LOG.info('updated record') { record }
end

records.each do |r|
  extract_timestamp_and_insert_date(r)
end
