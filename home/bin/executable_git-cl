#!/usr/bin/env ruby

require 'uri'
# I never/rarely want to clone http b/c it sets up the wrong remote
# s/https://github.com/primedia/service_images/git@github.com:primedia/service_images.git/


def run_specs
  require 'minitest/autorun'
  require 'minitest/pride'

  describe 'translate http to git@ url' do
    it 'converts' do
      input = "https://github.com/primedia/service_images"
      expected = "git@github.com:primedia/service_images.git"

      translate_url(input).must_equal expected
    end

    it 'no-ops when already git url' do
      input = "git@github.com:primedia/service_images.git"
      expected = "git@github.com:primedia/service_images.git"

      translate_url(input).must_equal expected

    end
  end

  describe '#is_git_url?' do
    it 'evaluates when true' do
      input = "git@github.com:primedia/service_images.git"

      is_git_url?(input).must_equal true
    end
    it 'evaluates when incorrect url' do
      input = "https://github.com/primedia/service_images"

      is_git_url?(input).must_equal false
    end
  end

  describe '#http_to_git' do
    it 'parses url' do
      input = "https://github.com/primedia/service_images"
      expected = "git@github.com:primedia/service_images.git"

      http_to_git(input).must_equal expected
    end

    # it 'evaluates when incorrect url' do
    #   input = "https://github.com/primedia/service_images"

    #   is_git_url?(input).must_equal false
    # end
  end
end

def is_git_url?(url)
  !!url[/^git@.*\.git$/i]
end

def http_to_git(url)
  # find url
  uri = URI.parse(url)
  path = uri.path.gsub(/^\//, '')
  host = uri.host
  %W[git @ #{host} : #{path} .git].join
end

def git_binary_path
  %W[gh hub git].map do |bin|
    `which #{bin}`.chomp
  end.reject(&:empty?).first
end

def translate_url(url)
  if is_git_url?(url)
    url
  else
    http_to_git(url)
  end
end

def main
  url = ARGV.first
  bin = git_binary_path

  case url
  when /^http/i
    proper_url = translate_url(url)
    exec "#{bin} clone #{proper_url}"
  else
    exec "#{bin} clone #{$*.first}"
  end
end

if ARGV.first == 'test'
  run_specs
else
  main
end

