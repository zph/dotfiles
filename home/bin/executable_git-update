#!/usr/bin/env bash
# SUMMARY: git-update will get the latest for your branch along with autostashing
# replaces git-smart-pull
set -eou pipefail

source $HOME/bin/lib/common.sh

readonly upstream_branch=$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}")
readonly default_branch="$(git branch-default)"

readonly head_sha=$(git rev-parse HEAD)

git_update_prettyprint_log () {
  local format=$(
    git config --get pretty.update ||
    echo "%C(yellow)%h%Cblue%d%Creset %s - %C(white)%an %Cgreen(%cr)%Creset")

  local merge_base_sha=$(git merge-base "$head_sha" "$remote_sha")
  git log --format="$format" --graph "$merge_base_sha".."$remote_sha"
}

header "Fetching origin $default_branch"
git fetch origin $default_branch:$default_branch --prune | indent

header "Making sure we're tracking remote"
git branch -u "origin/$(branch-name)" | indent

header "Getting latest from remote on current branch"
git pull --rebase=merges --autostash | indent

remote_sha=$(git rev-parse "$upstream_branch")

header "Changes applied"
git_update_prettyprint_log
success "âœ… Complete"

# Check the trunk branch
hash1=$(git show-ref --heads -s origin/$default_branch)
# Check the trunk branch vs the current
hash2=$(git merge-base origin/$default_branch origin/HEAD)

if [ "${hash1}" = "${hash2}" ];then
  # No rebase/update needed
  success "âœ… No rebase needed to get current"
else
  echo "ðŸ†˜ Rebase is required"
  read -r -p "Continue? (Y/N): " confirm
  if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
    git rebase "origin/${default_branch}"
  else
    warn "Branch not current with origin/${default_branch}"
  fi
fi
