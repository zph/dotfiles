#!/usr/bin/env -S deno run --allow-env --allow-run --allow-net --allow-read --allow-write --ext=ts

// Script to manage DotSlash manifests for GitHub releases
// Usage: $0 <command> <extra_args>
//
// Commands:
//   create    Generate a new manifest file
//   update    Update an existing manifest(s) file
//   check     Verify if updates are available
//
// Create command:
//   $0 create owner/repo tag_name asset_pattern
//
// The tag_name parameter supports semver constraints:
//   - Exact versions: 1.2.3
//   - Caret ranges: ^1.2.3 (matches 1.2.3 to <2.0.0)
//   - Tilde ranges: ~1.2.3 (matches 1.2.3 to <1.3.0)
//   - Greater than: >1.2.3
//   - Greater/equal: >=1.2.3
//   - Less than: <2.0.0
//   - Less/equal: <=2.0.0
//   - Hyphen ranges: 1.2.3 - 2.0.0
//   - Combined ranges: >=1.2.3 <2.0.0
//   - 'v' prefix is optional: v1.2.3 is the same as 1.2.3
//
// Examples:
//   $0 create owner/repo 1.2.3 "*.tar.gz"          # Create manifest for version 1.2.3
//   $0 update owner/repo ^1.2.3 "release-*.zip"    # Update manifest to latest 1.x.x
//   $0 check owner/repo ">=1.0.0 <2" "*-linux-*"   # Check for updates
//
// Update command:
//   $0 update                      # Update all manifests in the current directory
//   $0 update manifest1 manifest2  # Update specific manifests
//   $0 update $PWD                 # Update all manifests in the current directory

import { blake3 } from "npm:@noble/hashes/blake3";
import { bytesToHex } from "npm:@noble/hashes/utils";
import { parseArgs } from "jsr:@std/cli";
import $ from "jsr:@david/dax";
const { dedent } = $;
import * as semver from "npm:semver";
import { parse } from "jsr:@std/jsonc";

interface GithubRelease {
  tag_name: string;
  assets: Array<{
    name: string;
    size: number;
    browser_download_url: string;
  }>;
}

interface Platform {
  arch: string;
  os: string;
  pattern: (name: string) => boolean;
}

type Pattern = string[]
const containsAny = (patterns: Pattern) => (name: string) => patterns.some(pattern => name.includes(pattern))
const containsAll = (patterns: Pattern[]) => (name: string) => patterns.every(p => containsAny(p)(name))

const X86 = ["x64", "amd64", "x86_64"]
const ARM = ["arm64", "aarch64"]

const Apple = ["apple", "darwin", "macos"]
const Linux = ["linux"]

const PLATFORMS: Platform[] = [
  {
    arch: "aarch64",
    os: "linux",
    pattern: containsAll([Linux, ARM])
  },
  {
    arch: "x86_64",
    os: "linux",
    pattern: containsAll([Linux, X86])
  },
  {
    arch: "aarch64",
    os: "macos",
    pattern: containsAll([Apple, ARM])
  },
  {
    arch: "x86_64",
    os: "macos",
    pattern: containsAll([Apple, X86])
  },
];

async function getBlake3Hash(url: string): Promise<string> {
  const response = await fetch(url);
  const data = new Uint8Array(await response.arrayBuffer());

  const hash = blake3(data);
  return bytesToHex(hash);
}

type DotSlashFormat = "tar.gz" | "tar.xz" | "tar.zst" | "tar" | "zip" | "gz" | "xz" | "zst" | undefined;

// Check for officially supported formats
const supportedFormats: DotSlashFormat[] = [
  "tar.gz",
  "tar.xz",
  "tar.zst",
  "tar",
  "zip",
  "gz",
  "xz",
  "zst"
];

function getAssetFormat(filename: string): DotSlashFormat {
  // Handle common alternative extensions first
  if (filename.endsWith(".tgz")) {
    return "tar.gz";
  }


  for (const format of supportedFormats) {
    if (filename.endsWith(`.${format}`)) {
      return format;
    }
  }

  // If no format is detected, return undefined
  // This will cause the format field to be omitted
  return undefined;
}

async function determineLookupType(tag: string) {
  if (tag.split(" ").length > 1) {
    return "range"
  }
  if (tag === 'latest') {
    return "latest"
  }
  if (/^[~><=]/.test(tag)) {
    return "range"
  }
  return "exact"
}

async function getReleaseBestMatch(
  owner: string,
  repo: string,
  tag: string
): Promise<GithubRelease> {
  const lookupType = await determineLookupType(tag);
  if (["exact", "latest"].includes(lookupType)) {
    // Check if tag matches a release tag directly first
    // Used as safe fallback and for non-semver tags including 'latest'
    // could use `gh release view --repo dprint/dprint --json tagName`
    const releaseUrl = tag === 'latest'
      ? `${GITHUB_API_URL}/repos/${owner}/${repo}/releases/latest`
      : `${GITHUB_API_URL}/repos/${owner}/${repo}/releases/tags/${tag}`;
    const response = await fetch(releaseUrl);
    if (!response.ok) {
      throw new Error(`Failed to fetch release ${releaseUrl}: ${response.statusText}`);
    }

    const release: GithubRelease = await response.json();
    return release
  }

  // Otherwise, we need to search for the constraint matching tag
  const releasesUrl = `${GITHUB_API_URL}/repos/${owner}/${repo}/releases`;

  const response = await fetch(releasesUrl);
  if (!response.ok) {
    throw new Error(`Failed to fetch releases: ${response.statusText}`);
  }

  const releases: GithubRelease[] = await response.json();

  // Find best matching version
  const versions = releases
    .map(r => r.tag_name.replace(/^v/, ''))
    .filter(v => semver.valid(v));

  const targetVersion = tag.replace(/^v/, '');

  const bestMatch = semver.maxSatisfying(versions, targetVersion);

  if (!bestMatch) {
    throw new Error(`No matching version found for ${tag}`);
  }

  const release = releases.find(r =>
    r.tag_name === `v${bestMatch}` || r.tag_name === bestMatch
  );

  if (!release) {
    throw new Error(`Release not found for version ${bestMatch}`);
  }

  return release;
}

async function create(
  owner: string,
  repo: string,
  tag: string,
  assetPattern: string
): Promise<void> {
  const release = await getReleaseBestMatch(owner, repo, tag);

  const manifest = {
    name: repo,
    platforms: {} as Record<string, any>,
    metadata: {} as Record<string, any>,
  };

  await Promise.all(PLATFORMS.map(async (platform) => {
    const asset = release.assets.find(a =>
      a.name.match(assetPattern) && platform.pattern(a.name.toLowerCase())
    );

    if (asset) {
      const platformKey = `${platform.os}-${platform.arch}`;
      const hash = await getBlake3Hash(asset.browser_download_url);

      manifest.platforms[platformKey] = {
        size: asset.size,
        hash: "blake3",
        digest: hash,
        path: `${repo}`, // TODO: allow specifying the path
        format: getAssetFormat(asset.name),
        providers: [
          {
            type: "github-release",
            repo: `${owner}/${repo}`,
            tag: release.tag_name,
            name: asset.name
          }
        ],
        readonly: true
      };
    }
  }));
  manifest.metadata = {
    build_info: buildInfo(tag)
  }
  // Write the manifest with the required shebang
  await writeManifest(manifest, repo);
}

function buildInfo(tag: string) {
  return {
    created_at: new Date().toISOString(),
    build_tool: Deno.mainModule.split("/").pop(),
    command: runCommand(),
    tag: tag,
  }
}

async function writeManifest(manifest: Manifest, path: string) {
  const output = dedent`
  #!/usr/bin/env dotslash

  ${JSON.stringify(manifest, null, 2)}
  `
  await Deno.writeTextFile(path, output);
  await Deno.chmod(path, 0o755);
}

const safeStat = async (arg: string) => {
  try {
    return await Deno.stat(arg);
  } catch {
    return null;
  }
}

// Add logger implementation
const LogLevels = {
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
} as const;

type LogLevel = keyof typeof LogLevels;

class Logger {
  private level: number;

  constructor(level: LogLevel = "INFO") {
    this.level = LogLevels[level];
  }

  debug(...args: unknown[]) {
    if (this.level <= LogLevels.DEBUG) {
      console.debug(...args);
    }
  }

  info(...args: unknown[]) {
    if (this.level <= LogLevels.INFO) {
      console.log(...args);
    }
  }

  warn(...args: unknown[]) {
    if (this.level <= LogLevels.WARN) {
      console.warn(...args);
    }
  }

  error(...args: unknown[]) {
    if (this.level <= LogLevels.ERROR) {
      console.error(...args);
    }
  }
}

const standardizeManifestArgs = async (args: string[]) => {
  const files: string[] = [];
  for (const arg of args) {
    // If arg is a file, add it to the list
    // If arg is a directory, find all files to the list
    try {
      const stat = await safeStat(arg);
      if (stat?.isFile) {
        files.push(arg);
      } else if (stat?.isDirectory) {
        // If arg is a directory, find all files that start with dotslash shebang
        for await (const entry of Deno.readDir(arg)) {
          // Note we're not handling recursive directory lookups
          // TODO: frankly the user should use shell globs instead
          if (!entry.isFile) continue;

          const path = `${arg}/${entry.name}`;
          files.push(path);
        }
      }
    } catch (e: any) {
      logger.error(`Ignoring ${arg} because it does not exist: ${e.message}`);
      throw e;
    }
  }
  // Filter out files that don't have the dotslash shebang
  const manifests = await Promise.all(files.map(async f => {
    const file = await Deno.open(f);
    const buf = new Uint8Array(512 * 1); // 1 byte per character
    await file.read(buf);
    file.close();
    const firstLine = new TextDecoder().decode(buf).split('\n')[0];
    logger.debug(`First line of ${f}: ${firstLine}`);
    const isShebang = firstLine.startsWith('#!')
    const isDotslash = firstLine.trim().endsWith('dotslash')
    logger.debug(`isShebang: ${isShebang}, isDotslash: ${isDotslash}`);
    return (isShebang && isDotslash) ? f : null;
  }));
  logger.debug(`Found ${manifests.length} manifests`, manifests);
  return manifests.filter(m => m !== null);
}

interface Manifest {
  name: string;
  platforms: Record<string, any>;
  metadata: Record<string, any>;
}

const update = async (manifests: string[]) => {
  for (const manifestFile of manifests) {
    const manifestText = await Deno.readTextFile(manifestFile);
    // Skip the first line of the file
    const jsonStart = manifestText.indexOf('\n') + 1;
    const manifest: Manifest = parse(manifestText.substring(jsonStart)) as unknown as Manifest;
    logger.info(`Updating`, manifest.metadata.build_info.command);
    const cmd = manifest.metadata.build_info.command;
    if (cmd?.includes("create")) {
      // Do not re-quote the string
      await $.raw`${cmd}`.printCommand();
    } else {
      logger.error(`Unsupported command: ${manifest.metadata.build_info.command}`);
      logger.error(`Create it manually first`);
    }
  }
}

let logger = new Logger(Deno.env.get("LOG_LEVEL") as LogLevel || "INFO");
const GITHUB_API_URL = Deno.env.get("GITHUB_API_URL") || "https://api.github.com";
const runCommand = () => `${Deno.mainModule.split("/").pop()} ${Deno.args.map($.escapeArg).join(" ")}`

// TODO: barebones check right now
// longer term setup this command to check for link-rot
const check = async (manifests: string[]) => {
  for (const manifestFile of manifests) {
    const manifestText = await Deno.readTextFile(manifestFile);
    if (manifestText.includes("TODO:")) {
      logger.warn(`${manifestFile} has TODOs`);
      logger.warn(manifestText.split("TODO:").map(l => l.trim()).join("\n"));
    }
  }
}

// TODO:
// - enable using a registry for installing tools which is really just a repo, like homebrew-zph repo.
// - then it can be dotslash-pkg install zph/dotslash-packages/jq
const main = async () => {
  // Parse command line arguments
  const args = parseArgs(Deno.args, {
    boolean: ["verbose"],
    string: ["output"],
    default: {
      output: null,
    }
  });

  if (args.verbose) {
    logger = new Logger("DEBUG");
  }

  if (args._.length < 1) {
    logger.error("Usage: $0 <command> <command_args>");
    logger.error("\nCommands:");
    logger.error("  create    Generate a new manifest file");
    logger.error("  update    Update an existing manifest file");
    logger.error("  check     Verify if updates are available");
    logger.error("  install   Install a tool from a manifest");
    Deno.exit(1);
  }

  // Validate command
  const command = args._[0].toString();
  if (!["create", "update", "check", "install"].includes(command)) {
    logger.error("Invalid command. Must be one of: create, update, check, install");
    Deno.exit(1);
  }

  if (command === "create") {
    // Create can handle two forms:
    // 1. github release pattern: owner/repo tag pattern
    // 2. http/https url pattern
    if (args._[1]?.toString().toLowerCase().startsWith("http")) {
      const [_, url, name] = args._;
      const output = await $.raw`dotslash -- create-url-entry ${url}`.stdout("piped").printCommand();
      const baseManifest = JSON.parse(output.stdout);
      await writeManifest({ ...baseManifest, metadata: { build_info: buildInfo("") }, name: name.toString() }, name.toString());
      return;
    }
    const [_command, repo, tag, pattern] = args._;
    const [owner, repoName] = repo.toString().split("/");

    if (!owner || !repoName) {
      logger.error("Repository must be in format owner/repo");
      Deno.exit(1);
    }

    create(owner, repoName, tag.toString(), pattern.toString())
      .catch(err => logger.error(err));
  } else if (command === "update") {
    const [_command, ...maybeManifests] = args._;
    const manifests = await standardizeManifestArgs(maybeManifests.map(m => m.toString())).then(m => m.filter(m => m != null)) as string[];
    update(manifests).catch(err => logger.error(err));
  } else if (command === "check") {
    const [_command, ...maybeManifests] = args._;
    const manifests = await standardizeManifestArgs(maybeManifests.map(m => m.toString())).then(m => m.filter(m => m != null)) as string[];
    check(manifests).catch(err => logger.error(err));
  } else if (command === "install") {
    const [_command, ...maybeRefs] = args._;
    for await (const ref of maybeRefs) {
      install(ref.toString(), args).catch(err => logger.error(err));
    }
  }
}

// TODO: setup mechanism to specify output file and default to manifest name
async function install(ref: string, args: typeof parseArgs) {
  const refType = determineRefType(ref);
  if (refType === "http") {
    installHttp(ref, args);
  } else if (refType === "github") {
    installGithub(ref, args);
  }
}

async function installHttp(ref: string, args: typeof parseArgs) {
  const output = await fetch(ref).then(r => r.text());
  await Deno.writeTextFile(args.output || ref, output);
  await Deno.chmod(args.output || ref, 0o755);
  console.log(`Installed ${args.output || ref}`);
}

function ensurePrefix(str: string, prefix: string): string {
  if (!str.startsWith(prefix)) {
    return prefix + str;
  }
  return str;
}

// TODO: support branch/ref/commit as fragment
async function installGithub(refRaw: string, args: typeof parseArgs) {
  const uri = new URL(ensurePrefix(refRaw, "github://"));
  const owner = uri.host
  const [repo, _] = uri.pathname.split("/").slice(1);
  const path = uri.pathname.split("/").slice(2).join("/");
  const tag = uri.hash ? uri.hash.slice(1) : "latest"; // Get fragment without # prefix, default to latest
  if (!path) {
    throw new Error("Path is required for github:// URLs");
  }
  let ref = tag;

  if (tag == "latest") {
    // Get default branch if tag not specified
    ref = await fetch(`${GITHUB_API_URL}/repos/${owner}/${repo}`)
      .then(r => {
        if (!r.ok) {
        throw new Error(`Failed to fetch repo info: ${r.statusText}`);
      }
      return r.json();
    })
    .then(data => data.default_branch);
  }

  const rawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${ref}/${path}`;
  const response = await fetch(rawUrl);
  if (!response.ok) {
    throw new Error(`Failed to fetch ${rawUrl}: ${response.statusText}`);
  }

  const content = await response.text();
  const outputPath = args.output as string || path.split("/").pop() || "";
  await Deno.writeTextFile(outputPath, content);
  await Deno.chmod(outputPath, 0o755);
  console.log(`Installed ${outputPath}`);
}

type RefType = "http" | "github"

function determineRefType(ref: string): RefType {
  if (ref.startsWith("http")) {
    return "http"
  }
  if (ref.startsWith("github://")) {
    return "github"
  }
  // TODO: support S3, GCS, and git://
  // Otherwise, assume it's a github reference
  return "github"
}

if (import.meta.main) {
  main().catch(err => logger.error(err));
}
