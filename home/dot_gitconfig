# Much of the customization in this Config originated from Gary Bernhardt and other sources.
# Setting up Github PAT: https://www.learnhowtoprogram.com/introduction-to-programming/getting-started-with-intro-to-programming/creating-and-using-a-git-pat
[user]
  name = Zander Hill
  email = zander@xargs.io
  signingkey = 6CBA19142E2EBACB
[color]
  ui = true
[alias]
  ap = add -p
  ci = commit -v
  # Named this way because of formerly using git-smart-pull
  sp = update
  a = add
  ai = "!git add --intent-to-add ."
  aa = add --all
  aap = add --all --patch
  ai = add -i
  an = add -N
  amend = commit --amend
  ap = add -p
  b = "!git for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)'"
  bn = "!git rev-parse --abbrev-ref HEAD | tr -d '\n'"
  ci = commit -v
  cim = commit -m
  cin = commit -n -m
  com = "!git checkout $(git branch-default)"
    # cl = clone
  cp = cherry-pick
    #clcd = "!git clone $1 && cd !$"
  cos = "!git switch"
  co = checkout
  cof = "!git checkout `git status -s | awk '{print $2}' | fzf`"
  dc = diff --cached
  dh = diff HEAD~1
  d = diff
  dh1 = diff HEAD~1
  di = diff
  div = divergence
  ds = diff --staged
  dw = diff --color=always --word-diff | less -r
  df  = diff --color-words
  fa = fetch --all
  ff = merge --ff-only
  gn = goodness
  gnc = goodness --cached
  h = !git head
  head = !git l -1
  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  hp = "!source ~/.githelpers && show_git_head"
  implode = "!git reset --hard && git clean -df"
  l = "!source ~/.githelpers && pretty_git_log"
  la = !git l --all
  noff = merge --no-ff
  nope = "!sh -c 'git checkout .; git checkout -'"
  pbo = "!git push origin \"$(git rev-parse --abbrev-ref HEAD)\""
  bpo = "!git push origin \"$(git rev-parse --abbrev-ref HEAD)\""
  ub = "!git update-branch"
    # up = "!git pull --rebase origin \"$(git rev-parse --abbrev-ref HEAD)\""
    #pr = "!open \"$(git remote -v | grep origin | grep push | cut -f 2 | cut -d \" \" -f 1 | sed -e \"s|git@\\(.*\\):\\(.*\\).git|https://\\1/\\2|\")/pull/new/$(git rev-parse --abbrev-ref HEAD)\""
  gh = "!open \"$(git remote -v | grep origin | grep push | cut -f 2 | cut -d \" \" -f 1 | sed -e \"s|git@\\(.*\\):\\(.*\\).git|https://\\1/\\2|\")/tree/$(git rev-parse --abbrev-ref HEAD)\""
  pom = push origin master
  po = push origin
    # pr = pull --rebase
  pr  = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
  pl = pull
  p = "!git pull --rebase --prune"
  save = "!git add -A && git commit -m 'SAVEPOINT'"
  wip = "!git add -u && git commit -n -m 'WIP'"
  wipe = "!git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard"
    #pu = push
  pul = pull --ff-only
  pullff = pull --ff-only
  r = !git l -30
  ra = !git r --all
  rh = reset --hard
  rhh = "!git reset --hard && git clean -df"
  st = status -s
  stt = "!git status -s | grep -v \"^??\""
  sf = show --pretty="format:" --name-only
  stash = !git stash --include-untracked
  sv = !git show -v -v
  spp = update
  srp = update
  conflicts = !git ls-files -u | cut -f 2 | sort -u
  c = !git ls-files -u | cut -f 2 | sort -u
  ub = update
  modified = !git ls-files -m
  unapply = !git stash show -p | git apply -R
  remove-deleted = !git ls-files --deleted | xargs git rm
  wta = "!f() { git worktree add ~/src/worktree/$1 $1 && echo ~/src/worktree/$1; }; f"
  wt = worktree
  wtp = worktree prune
  wtc = worktree-clone
  wc = worktree-clone
    # Divergence (commits we added and commits remote added)
    # div = divergence

    # Goodness (summary of diff lines added/removed/total)
    # gn = goodness
    # gnc = goodness --cached

    # Fancy logging.
    #   h = head
    #   hp = head with patch
    #   r = recent commits, only current branch
    #   ra = recent commits, all reachable refs
    #   l = all commits, only current branch
    #   la = all commits, all reachable refs
  ll2 = "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
  h = !git head
  head = !git l -1
  hp = "!. ~/.githelpers && show_git_head"
  l = "!. ~/.githelpers && pretty_git_log"
  la = !git l --all
  # ll = !git r --all
  ll = !git smart log
  lo = !git log --oneline
  r = !git l -30
  ra = !git r --all
  unstage = reset HEAD
    # Mark a file as "assume unchanged", which means that Git will treat it
    # as though there are no changes to it even if there are. Useful for
    # temporary changes to tracked files
  assume = update-index --assume-unchanged
    # Reverse the above
  unassume = update-index --no-assume-unchanged
    # Show the files that are currently assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"


  bs = !git bisect
    # Wil Moore III
    # http://git.io/gopyOg
    # open files with conflict markers in your configured editor
  edit-conflicted   = !$EDITOR $(git grep --name-only --full-name '<<<<<<< HEAD' | awk '{print $NF}')
    # locate commit where a particular file was introduced
  added-file        = log --diff-filter=A --
    # list aliases
  aliases           = !git config --get-regexp '^alias.' | awk -F '[. ]' '{ print $2 }'
    # list git bins (lots of gems in there)
  bin               = !find $(git --exec-path) -type f | xargs basename | $(git config --get core.pager)
    # list commits not yet pushed to remote
  local             = log --branches --not --remotes
    # show commits where my github user name is the author
  log-github-user   = !git log --author="$(git config --get github.user)"
    # markdown-friendly list of topic/branch related logs (great for Github pull requests)
  markdown          = !BN=$(git name-rev --name-only HEAD) && git log --no-merges --grep=$BN --pretty=oneline | awk -F"$BN: " '{print \"-\", $NF}' | uniq
    # show branches that have been merged into current (HEAD) branch
  merged            = !git fetch --all --prune && git branch --all --merged HEAD
    # show branches that have not been merged into current (HEAD) branch
  not-merged        = !git fetch --all --prune && git branch --all --no-merged HEAD
    # fetch and rebase from upstream/master then push current branch to origin
  sync              = update
  sync-rebase       = update
  branch-by-recent  = !git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format='%(refname:short)'
  ribbon = tag --force _ribbon origin/master
  catchup = log --patch --reverse --topo-order _ribbon..origin/master
  # https://stackoverflow.com/questions/957928/is-there-a-way-to-get-the-git-root-directory-in-one-command#comment9747528_957978
  # so it's possible to do `git exec make` which switches it to top of git repo
  exec = "!exec "
	new = !git init && git symbolic-ref HEAD refs/heads/main

[merge]
  tool = vimdiff
[github]
  user = zph
[core]
  autocrlf = input
  safecrlf = true
  excludesfile = ~/.gitignore_global
  pager = diff-so-fancy | less --tabs=4 -RFX
[credential]
	helper = cache --timeout=3600
[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path =
[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true
[push]
  default = current
[web]
  browser = chrome
[branch]
  autosetuprebase = always
[rerere]
  enabled = 1
[heroku]
  remote = staging
[init]
	defaultBranch = main
# templatedir = ~/.git_init_template
[log]
  date = iso8601
[ghi]
  token = !security find-internet-password -a zph -s github.com -l 'ghi token' -w
[diff "ansible-vault"]
  textconv = ansible-vault view
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22
[color "diff"]
  meta = yellow
  frag = magenta bold
  commit = yellow bold
  old = red bold
  new = green bold
  whitespace = red reverse
[filter "lfs"]
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
# Standardization https://coolaj86.com/articles/vanilla-devops-git-credentials-cheatsheet/
# Relys on setting GIT_ASKPASS ENV variable
[url "https://ssh@github.com/"]
  insteadOf = ssh://git@github.com/
[url "git@github.com:"]
  insteadOf = https://github.com/

# Disable the git->https to flip back to keys not PAT
; [url "https://git@github.com/"]
;   insteadOf = git@github.com:
; [url "https://api@github.com/"]
;   insteadOf = https://github.com/
; [url "https://api@github.com/"]
;   insteadOf = https://github.com/
[include]
  # Include is used to load private configurations
  path = "~/.config/git/config.local"
  # Content
  # [github]
  #   token = <TOKEN>
  #   oauth-token = <TOKEN>
[includeif "gitdir:~/src/work/**"]
  path = ~/.gitconfig-work
[gpg "ssh"]
  allowedSignersFile = ~/.ssh/allowed_signers
